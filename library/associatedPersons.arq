#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All places associated with the given entity
#QueryParams=R_RES
#QueryUrl=/lib/associatedPersons?R_RES=bdr:W19740

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the referenced entity

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

construct {
    ?R_RES skos:prefLabel ?resL .
    ?res tmp:status ?st .
    ?res tmp:isMain true .
    ?res ?resp ?reso .
    ?res tmp:yearStart ?yearStart .
    ?res tmp:provider ?provider .
    ?res tmp:originalRecord ?originalRecord .
    ?res tmp:relationType ?rel1 .
    ?res tmp:relationType ?rel2 .
    ?res tmp:relationType ?rel3 .
    ?res tmp:relationType ?rel4 .
    ?res tmp:relationType ?cmtype .

    ?evt ?evtp ?evto .
}
where {
  # We have 3 types of matches:
  #   * isAbout a person
  #   * an entity having an event with a bdo:eventWho
  #   * a person having an event where the bdo:eventWhere is the resource
  #   * an entity have a creator with a bdo:agent
  {
    ?R_RES skos:prefLabel ?resL .
  } union {
    # this is very slow if there's no none.opts file in the fuseki database folder
    {
      ?R_RES ?rel1 ?res .
      ?res a bdo:Person .
    } union {
      ?R_RES ?evtp ?evtMatch .
      ?evtMatch bdo:eventWho ?res ;
                # /!\ binding the event type as the relation
                a ?rel2 .
    } union {
      # example: persons born in a place
      ?evtMatch2 bdo:eventWhere ?R_RES ;
                # /!\ binding the event type as the relation
                a ?rel3 .
      ?res :personEvent ?evtMatch2 .
    } union {
      ?R_RES bdo:creator ?creatorNode .
      ?creatorNode bdo:agent ?res .
      BIND(bdo:creator as ?rel4)
    } union {
      ?R_RES bdo:corporationHasMember ?cm .
      ?cm a ?cmtype ;
          bdo:corporationMember ?res .
    }
    
    VALUES ?resp {skos:altLabel skos:prefLabel skos:placeEvent bdo:personGender bdo:personEvent owl:sameAs tmp:entityScore tmp:associatedCentury tmp:hasRole bdo:associatedTradition }
    ?res ?resp ?reso .
    ?resAdm adm:adminAbout ?res .
    ?resAdm adm:status ?st .
    ?resAdm adm:metadataLegal/adm:provider ?provider .
    
  } union {

    # first part is a copy paste of the part of the union
    {
      ?R_RES ?evtp ?evtMatch .
      ?evtMatch bdo:eventWho ?res ;
                a ?rel2 .
    } union {
      ?evtMatch2 bdo:eventWhere ?R_RES ;
                a ?rel3 .
      ?res :personEvent ?evtMatch2 .
    } union {
      ?R_RES bdo:creator ?creatorNode .
      ?creatorNode bdo:agent ?res .
      BIND(bdo:creator as ?rel4)
    } union {
      ?R_RES bdo:corporationHasMember ?cm .
      ?cm a ?cmtype ;
          bdo:corporationMember ?res .
    }

    ?res bdo:personEvent ?evt .
    ?evt a ?evtType .
    FILTER (?evtType IN(bdo:PersonBirth , bdo:PersonDeath))
    ?evt ?evtp ?evto .
    BIND (IF(?evtType = bdo:PersonBirth && (?evtp = bdo:onYear || ?evtp = bdo:notBefore), ?evto, 1/0) as ?yearStart)

  }
}
