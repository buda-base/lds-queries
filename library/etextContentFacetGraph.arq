#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All works having etext whose chunks contain the given L_NAME parameter value, along with Topic and WorkMainAuthor facets
#QueryParams=L_NAME,LG_NAME,B_RIC
#QueryOptParams=R_EINST
#QueryUrl=/lib/etextContentFacetGraph?L_NAME="de bzhin gshegs"&LG_NAME=bo-x-ewts

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="ye shes"

#param.B_RIC.type=boolean
#param.B_RIC.desc=whether or not the query should return georestricted results

#param.R_EINST.type=URI
#param.R_EINST.subtype=bdo:EtextInstance
#param.R_EINST.desc=the etext instance in which the results should be returned

construct {
  ?etext tmp:isMain true .
  ?etext skos:prefLabel ?etextL .
  ?etext bdo:eTextHasChunk ?chunk .
  ?etext adm:access ?ac .
  ?etext tmp:inRootInstance ?R_EINST .
  ?R_EINST skos:prefLabel ?einstanceL .

  ?chunk bdo:chunkContents ?lit .
  ?chunk bdo:sliceStartChar ?startChar .
  ?chunk bdo:sliceEndChar ?endChar .
  ?chunk tmp:matchScore ?score .
  ?etext tmp:provider ?provider .

  ?etext ?etextp ?etexto .
  
  ?etext tmp:forWork ?w .
  ?w ?wp ?wo .

  ?etext tmp:author ?author .
  ?agent skos:prefLabel ?agentL .
  ?etext tmp:associatedCentury ?authorC .
  ?etext bdo:associatedTradition ?authorT .


  ?etext tmp:maxScore ?maxScore .
  ?etext tmp:nbChunks ?nbchunks .


  ?etext tmp:OCRscore ?OCRscore.
}
where
{
  {
    (?chunk ?score ?lit) text:query ( :chunkContents ?L_NAME "highlight:") .
    ?etext bdo:eTextHasChunk ?chunk .
    ?etext bdo:eTextInInstance ?R_EINST .
    ?R_EINST bdo:instanceReproductionOf? ?einstwithlabel .
    ?einstwithlabel skos:prefLabel ?einstanceL .

    ?eAdm adm:adminAbout ?R_EINST ;
          adm:status bda:StatusReleased ;
          adm:access ?ac .
    FILTER (?ac IN(bda:AccessOpen , bda:AccessFairUse))
    FILTER ((! ?B_RIC) || NOT EXISTS {?eAdm adm:restrictedInChina true.})
    # kind of cheating, the issue here is that openpecha don't always have the
    # work -> etextinstance link
    ?einstwithlabel :instanceOf ?w .

    ?chunk bdo:sliceStartChar ?startChar .
    ?chunk bdo:sliceEndChar ?endChar .
    ?eAdm adm:metadataLegal/adm:provider ?provider .
    ?w ?wp ?wo .
    FILTER (?wp IN(skos:altLabel , skos:prefLabel , rdf:type , owl:sameAs , tmp:entityScore))

  } union {

    # get optional properties skos:prefLabel and bdo:etextisvolume
    (?chunk) text:query ( :chunkContents ?L_NAME) .
    ?etext bdo:eTextHasChunk ?chunk .
    ?etext bdo:eTextInInstance ?R_EINST .
    ?eAdm adm:adminAbout ?R_EINST ;
          adm:status bda:StatusReleased ;
          adm:access ?ac .
    FILTER (?ac IN(bda:AccessOpen , bda:AccessFairUse))
    FILTER ((! ?B_RIC) || NOT EXISTS {?eAdm adm:restrictedInChina true.})
    VALUES ?etextp { skos:prefLabel bdo:eTextIsVolume }
    ?etext ?etextp ?etexto .

  } union {
    ?chunk text:query ( :chunkContents ?L_NAME ) .
    ?etext bdo:eTextHasChunk ?chunk .
    ?etext bdo:eTextInInstance ?R_EINST .
    ?eAdm adm:adminAbout ?R_EINST ;
          adm:status bda:StatusReleased ;
          adm:access ?ac .
    FILTER (?ac IN(bda:AccessOpen , bda:AccessFairUse))
    FILTER ((! ?B_RIC) || NOT EXISTS {?eAdm adm:restrictedInChina true.})
    ?R_EINST bdo:instanceReproductionOf? ?einstwithlabel .
    ?einstwithlabel :instanceOf ?w .

    ?w bdo:creator ?creator .
    ?creator bdo:role ?role .
    ?creator bdo:agent ?agent .
    VALUES ?agentp { skos:prefLabel tmp:associatedCentury bdo:associatedTradition }
    ?agent ?agentp ?agento .
    
    bind( if(?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agent, 1/0) as ?author)
    bind( if(?agentp = skos:prefLabel, ?agento, 1/0) as ?agentL)
    bind( if(?agentp = bdo:associatedTradition, ?agento, 1/0) as ?authorT)
    bind( if(?agentp = tmp:associatedCentury && ?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agento, 1/0) as ?authorC)
  } union {

    select ?etext (count (?chunk) as ?nbchunks) (max (?score) as ?maxScore) where {
      (?chunk ?score) text:query ( :chunkContents ?L_NAME) .
      ?etext bdo:eTextHasChunk ?chunk .
      ?etext bdo:eTextInInstance ?R_EINST .
      ?eAdm adm:adminAbout ?R_EINST ;
          adm:status bda:StatusReleased ;
          adm:access ?ac .
      FILTER (?ac IN(bda:AccessOpen , bda:AccessFairUse))
      FILTER ((! ?B_RIC) || NOT EXISTS {?eAdm adm:restrictedInChina true.})
    } group by ?etext 
  } union {

    # get optional OCR/quality info 
    (?chunk) text:query ( :chunkContents ?L_NAME) .
    ?etext bdo:eTextHasChunk ?chunk .
    ?etext bdo:eTextInInstance ?R_EINST .
    ?eAdm adm:adminAbout ?R_EINST ;
          adm:status bda:StatusReleased ;
          adm:access ?ac .
    FILTER (?ac IN(bda:AccessOpen , bda:AccessFairUse))
    FILTER ((! ?B_RIC) || NOT EXISTS {?eAdm adm:restrictedInChina true.})
    
    { 
      ?R_EINST bdo:OPFOCRWordMeanConfidenceIndex ?OCRscore . 
    } union {
      ?R_EINST bdo:OPFOCRSoftware  "norbuketaka". 
      BIND(0.99 as ?OCRscore) .
    } union {
      ?R_EINST bdo:contentMethod  bdr:ContentMethod_ComputerInput ;
      BIND(1.0 as ?OCRscore) .
    }
  }
}


