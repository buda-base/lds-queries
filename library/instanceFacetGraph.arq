#QueryScope=Instance
#QueryReturnType=Graph
#QueryResults=All instances matching a certain term
#QueryParams=L_NAME,LG_NAME
#QueryUrl=/lib/instanceFacetGraph?L_NAME="'od zer"&LG_NAME=bo-x-ewts

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="ye shes"

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT {

  ?res tmp:isMain true .
  ?res tmp:status ?status .
  ?res tmp:matchScore ?sc .
  ?res tmp:labelMatch ?labelMatch.
  ?res tmp:noteMatch ?noteMatch .
  ?res ?extMatchP ?extMatch .
  ?res tmp:provider ?provider .
  ?res tmp:originalRecord ?originalRecord .
  ?res ?resp ?reso .
  ?res :inRootInstance ?resR .
  ?resR skos:prefLabel ?resRl .
  ?res ?resRp ?resRo .
  ?res ?resp ?reso .

    ?res tmp:hasOpen ?hasopen .
    ?res tmp:hasImage ?hasimage .
    ?res tmp:hasEtext ?hasetext .

    ?res bdo:instanceOf ?resW .
    ?resW ?resWp ?resWo .

    # We cheat a bit and attach the topic to the instance instead
    # of the corresponding work
    ?res ?resWpp ?resWoo .
    ?resWoo skos:prefLabel ?resWol .
 
  # Same for the author, entity score and language
    ?res tmp:author ?author .
    ?agent skos:prefLabel ?agentL .
    ?res tmp:associatedCentury ?authorC .
    ?res bdo:associatedTradition ?authorT .

    ?res ?resWiip ?resWiio .
  
    ?resoo skos:prefLabel ?ol .

    ?res tmp:hasReproAccess ?resRepAccess .
    ?res tmp:hasReproQuality ?resRepQuality .

} where {

  {

    {
      (?res ?sc ?labelMatch) text:query ( bdo:skosLabels ?L_NAME "highlight:" ) .
      ?res a bdo:Instance .
    } union {
      (?title ?sc ?labelMatch) text:query ( rdfs:label ?L_NAME "highlight:" ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note ?sc ?noteMatch) text:query ( bdo:noteText ?L_NAME "highlight:" ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res ?sc ?extMatch ?graph ?extMatchP) text:query ( bdo:extendedStmts ?L_NAME "highlight:" ) .
      ?res a bdo:Instance .
    }
    # we could imagine adding also the scanInfo of the reproduction...

    FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
    ?resAdm adm:adminAbout ?res .
    ?resAdm adm:status ?status .
    ?resAdm adm:metadataLegal/adm:provider ?provider .

    ?res ?resp ?reso .
    FILTER (?resp != bdo:note && ?resp != bdo:instanceEvent && ?resp != bdo:hasTitle && ?resp != bdo:hasPart
      && ?resp != bdo:colophon && ?resp != bdo:incipit && (!BOUND(?extMatchP) || ?resp != ?extMatchP))

  } union {

    {
      (?res) text:query ( bdo:skosLabels ?L_NAME ) .
      ?res a bdo:Instance .
    } union {
      (?title) text:query ( rdfs:label ?L_NAME ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note) text:query ( bdo:noteText ?L_NAME ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
      ?res a bdo:Instance .
    }
    FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
    ?res bdo:instanceOf ?resW .
    
    ?resW bdo:creator ?creator .
    ?creator bdo:role ?role .
    ?creator bdo:agent ?agent .
    VALUES ?agentp { skos:prefLabel tmp:associatedCentury bdo:associatedTradition }
    ?agent ?agentp ?agento .
    
    bind( if(?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agent, 1/0) as ?author)
    bind( if(?agentp = skos:prefLabel, ?agento, 1/0) as ?agentL)
    bind( if(?agentp = bdo:associatedTradition, ?agento, 1/0) as ?authorT)
    bind( if(?agentp = tmp:associatedCentury && ?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agento, 1/0) as ?authorC)

  } union {
    
    {
      (?res) text:query ( bdo:skosLabels ?L_NAME ) .
      ?res a bdo:Instance .
    } union {
      (?title) text:query ( rdfs:label ?L_NAME ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note) text:query ( bdo:noteText ?L_NAME ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
      ?res a bdo:Instance .
    }

    ?res bdo:instanceOf ?resW .
    
    ?resW ?resWiip ?resWiio .

    FILTER (?resWiip = tmp:entityScore || ?resWiip = bdo:language || ?resWiip = bdo:catalogInfo)

  } union {
    
    {
      (?res) text:query ( bdo:skosLabels ?L_NAME ) .
      ?res a bdo:Instance .
    } union {
      (?title) text:query ( rdfs:label ?L_NAME ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note) text:query ( bdo:noteText ?L_NAME ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
      ?res a bdo:Instance .
    }
    FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
    ?res bdo:instanceOf ?resW .
    
    ?resW ?resWpp ?resWoo .
    FILTER(?resWpp IN(bdo:workIsAbout , bdo:workGenre))
    ?resWoo skos:prefLabel ?resWol .

  } union {

    # get access of reproductions
    
    {
      (?res) text:query ( bdo:skosLabels ?L_NAME ) .
      ?res a bdo:Instance .
    } union {
      (?title) text:query ( rdfs:label ?L_NAME ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note) text:query ( bdo:noteText ?L_NAME ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
      ?res a bdo:Instance .
    }
    FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
    ?res :inRootInstance?/:instanceHasReproduction? ?resRep .
    ?resRepAdm adm:adminAbout ?resRep ;
               adm:access ?resRepAccess .

    # ignoring OpenPecha access, as they are sometimes not in sync, see
    # https://github.com/buda-base/public-digital-library/issues/473
    
    FILTER NOT EXISTS {?resRepAdm adm:syncAgent  bdr:SAOPT }

    BIND(IF(EXISTS {?resRep :qualityGrade 0},0,1/0) as ?resRepQuality)

    } union {
      
    {
      (?res ?sc ?labelMatch) text:query ( bdo:skosLabels ?L_NAME ) .
      ?res a bdo:Instance .
    } union {
      (?title) text:query ( rdfs:label ?L_NAME ) .
      ?res bdo:hasTitle ?title .
    } union {
      (?note ?sc ?noteMatch) text:query ( bdo:noteText ?L_NAME ) .
      ?res bdo:note ?note .
      ?res a bdo:Instance .
    } union {
      (?res ?sc ?extMatch ?graph ?extMatchP) text:query ( bdo:extendedStmts ?L_NAME ) .
      ?res a bdo:Instance .
    }
    FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
    ?res :inRootInstance ?resR .
    ?resRAdm adm:adminAbout ?resR .
    ?resRAdm adm:status ?status .
    ?resRAdm adm:metadataLegal/adm:provider ?provider .

    ?resR skos:prefLabel ?resRl .
    ?resR ?resRp ?resRo .
    FILTER (?resRp = bdo:script || ?resRp = bdo:printMethod || ?resRp = tmp:thumbnailIIIFService || ?resRp = bdo:publisherLocation || ?resRp = bdo:publisherName)

    ?res ?resp ?reso .
    FILTER (?resp != bdo:note && ?resp != bdo:instanceEvent && ?resp != bdo:hasTitle && ?resp != bdo:hasPart
      && ?resp != bdo:colophon && ?resp != bdo:incipit && (!BOUND(?extMatchP) || ?resp != ?extMatchP))

  } union {

    select ?res 
             (max(?resAccessOpen) as ?hasopen)
             (max(?resImage) as ?hasimage) 
             (max(?resEtext) as ?hasetext) 
      where {
        
        {
          (?res) text:query ( bdo:skosLabels ?L_NAME ) .
          ?res a bdo:Instance .
        } union {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?res bdo:hasTitle ?title .
        } union {
          (?note) text:query ( bdo:noteText ?L_NAME ) .
          ?res bdo:note ?note .
          ?res a bdo:Instance .
        } union {
          (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
          ?res a bdo:Instance .
        }
        FILTER ( NOT EXISTS {?res :instanceReproductionOf ?reprof })
        ?res :inRootInstance?/:instanceHasReproduction? ?resRep .

        ?resRepAdm adm:adminAbout ?resRep .
        ?resRepAdm adm:status bda:StatusReleased .
        bind( exists {?resRep a bdo:ImageInstance ; tmp:thumbnailIIIFService ?th } as ?resImage)
        bind( exists {?resRep a bdo:EtextInstance} as ?resEtext)
        bind( (exists {?resRepAdm adm:access bda:AccessOpen}) && not exists {?resRepAdm adm:syncAgent  bdr:SAOPT} &&(?resEtext || ?resImage) as ?resAccessOpen)
      } group by ?res 

    }
}
