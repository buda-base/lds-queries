#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All instances that have scans in a collection
#QueryParams=R_RES
#QueryUrl=/lib/instancesInCollection?R_RES=bdr:PR1KDPP00

#param.R_RES.type=bdo:Collection
#param.R_RES.desc=the collection

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT
{
    ?R_RES skos:prefLabel ?resL .
  ?res tmp:isMain true .
  ?res tmp:status ?status .
  ?res tmp:matchScore ?sc .
  ?res tmp:labelMatch ?labelMatch.
  ?res tmp:noteMatch ?noteMatch .
  ?res ?extMatchP ?extMatch .
  ?res tmp:provider ?provider .
  ?res tmp:originalRecord ?originalRecord .
  ?res ?resp ?reso .
  ?res :inRootInstance ?resR .
  ?resR skos:prefLabel ?resRl .
  ?res ?resRp ?resRo .
  ?res ?resp ?reso .
  ?res tmp:yearStart ?yearStart .
  ?res tmp:yearEnd ?yearEnd .

    ?res tmp:hasOpen ?hasopen .
    ?res tmp:possibleAccess ?haspossible .
    ?res tmp:catalogOnly ?catalogOnly .
    ?res tmp:hasImage ?hasimage .
    ?res tmp:hasEtext ?hasetext .

    ?res bdo:instanceOf ?resW .
    ?resW ?resWp ?resWo .

    # We cheat a bit and attach the topic to the instance instead
    # of the corresponding work
    ?res ?resWpp ?resWoo .
    ?resWoo skos:prefLabel ?resWol .
 
  # Same for the author, entity score and language
    ?res tmp:author ?author .
    ?agent skos:prefLabel ?agentL .
    ?res tmp:associatedCentury ?authorC .
    ?res bdo:associatedTradition ?authorT .

    ?res ?resWiip ?resWiio .
  
    ?resoo skos:prefLabel ?ol .

    ?res tmp:hasReproAccess ?resRepAccess .
    ?res tmp:hasReproQuality ?resRepQuality .

}
WHERE 
{
  # We have the following ways a work can be related to another thing:
  #  - direct relation to/from
  #  - work has creator R_RES
  {
  
    ?R_RES skos:prefLabel ?resL .
  
  } union {

    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?resAdm adm:adminAbout ?res .
    ?resAdm adm:status ?status .
    ?resAdm adm:metadataLegal/adm:provider ?provider .

    ?res ?resp ?reso .
    FILTER (?resp != bdo:note && ?resp != bdo:instanceEvent && ?resp != bdo:hasTitle && ?resp != bdo:hasPart
      && ?resp != bdo:colophon && ?resp != bdo:incipit)

    
  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res :inRootInstance? ?resR2 .
    ?resR2 :instanceEvent ?evt .

    ?resR2 :instanceEvent ?evt .
    ?evt a :PublishedEvent .
    ?evt ?evtp ?evto .
    BIND (IF(?evtp = bdo:onYear || ?evtp = bdo:notBefore, ?evto, 1/0) as ?yearStart)
    BIND (IF(?evtp = bdo:notAfter, ?evto, 1/0) as ?yearEnd)

  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res bdo:instanceOf ?resW .
    
    ?resW bdo:creator ?creator .
    ?creator bdo:role ?role .
    ?creator bdo:agent ?agent .
    VALUES ?agentp { skos:prefLabel tmp:associatedCentury bdo:associatedTradition }
    ?agent ?agentp ?agento .
    
    bind( if(?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agent, 1/0) as ?author)
    bind( if(?agentp = skos:prefLabel, ?agento, 1/0) as ?agentL)
    bind( if(?agentp = bdo:associatedTradition, ?agento, 1/0) as ?authorT)
    bind( if(?agentp = tmp:associatedCentury && ?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agento, 1/0) as ?authorC)

  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res bdo:instanceOf ?resW .
    
    ?resW ?resWiip ?resWiio .

    FILTER (?resWiip = tmp:entityScore || ?resWiip = bdo:language || ?resWiip = bdo:catalogInfo)

  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res bdo:instanceOf ?resW .
    
    ?resW ?resWpp ?resWoo .
    FILTER(?resWpp IN(bdo:workIsAbout , bdo:workGenre))
    ?resWoo skos:prefLabel ?resWol .

  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res :inRootInstance ?resR .
    ?resRAdm adm:adminAbout ?resR .
    ?resRAdm adm:status ?status .
    ?resRAdm adm:metadataLegal/adm:provider ?provider .

    ?resR skos:prefLabel ?resRl .
    ?resR ?resRp ?resRo .
    FILTER (?resRp = bdo:script || ?resRp = bdo:printMethod || ?resRp = tmp:thumbnailIIIFService || ?resRp = bdo:publisherLocation || ?resRp = bdo:publisherName)

  } union {
    
    ?w :inCollection ?R_RES .
    ?w :instanceReproductionOf ?res .

    ?res :inRootInstance ?resR .
    ?resRAdm adm:adminAbout ?resR .
    ?resRAdm adm:status ?status .
    ?resRAdm adm:metadataLegal/adm:provider ?provider .

    ?resR skos:prefLabel ?resRl .
    ?resR ?resRp ?resRo .
    FILTER (?resRp = bdo:script || ?resRp = bdo:printMethod || ?resRp = tmp:thumbnailIIIFService || ?resRp = bdo:publisherLocation || ?resRp = bdo:publisherName)

  } union {
    
    select ?res 
             (max(?resAccessOpen) as ?hasopen)
             (max(?resAccessPossible) as ?haspossible)
             (max(?resImage) as ?hasimage) 
             (max(?resEtext) as ?hasetext) 
             (min(?resCatalogOnly) as ?catalogOnly)
      where {
        
        ?resRep :inCollection ?R_RES .
        ?resRep :instanceReproductionOf ?res .

        ?resRepAdm adm:adminAbout ?resRep .
        ?resRepAdm adm:status bda:StatusReleased .
        bind( exists {?resRep a bdo:ImageInstance . values ?thp { tmp:thumbnailIIIFService tmp:thumbnailIIIFSelected } ?resRep ?thp  ?th } as ?resImage )
        bind( exists {?resRep a bdo:EtextInstance} as ?resEtext )
        bind( (exists {?resRepAdm adm:access bda:AccessOpen}) && not exists {?resRepAdm adm:syncAgent  bdr:SAOPT} &&(?resEtext || ?resImage) as ?resAccessOpen )
        bind( (exists {?resRepAdm adm:access ?acc . FILTER(?acc IN(bda:AccessOpen , bda:AccessFairUse , bda:AccessRestrictedSealed))}) && (?resEtext || ?resImage) as ?resAccessPossible )
        bind( not exists {?resRep a ?rept . FILTER(?rept IN(bdo:ImageInstance, bdo:EtextInstance))} as ?resCatalogOnly )
      } group by ?res 
  }
}
