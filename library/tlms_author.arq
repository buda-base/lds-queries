#QueryScope=Instance
#QueryReturnType=Table
#QueryResults=data necessary for the ISBN API
#QueryParams=L_NAME,LG_NAME
#QueryUrl=/tlms_author?L_NAME=klong chen pa&LG_NAME=bo-x-ewts
#QueryLimit=50000

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="\"klong chen pa\"~1"@bo-x-ewts

construct {
    ?bdrcres tmp:luceneScore ?sc ;
       tmp:isMain true ;
       tmp:idMatch ?idMatch ;
       tmp:superMatch ?superMatch .
    ?bdrcres ?resp ?reso .
    ?bdrcres bdo:personEvent ?evt .
    ?evt :eventWhen ?evtw ;
         a ?evtType .
} where {
  {
    {
        (?name ?sc) text:query ( rdfs:label ?L_NAME ) .
        ?res bdo:personName ?name .
    } union {
        (?res ?sc) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a :Person .
    }

    ?res owl:sameAs* ?bdrcres .
    ?resAdm adm:adminAbout ?bdrcres .
    ?resAdm adm:metadataLegal  bda:LD_BDRC_CC0 ;
            adm:status    bda:StatusReleased .
    FILTER(exists{?bdrcres tmp:hasRole ?r})
    VALUES ?resp { skos:prefLabel tmp:entityScore tmp:associatedCentury tmp:hasRole }
    ?bdrcres ?resp ?reso .
  } union {
    # get events
    {
        (?name) text:query ( rdfs:label ?L_NAME ) .
        ?res bdo:personName ?name .
    } union {
        (?res) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a :Person .
    }

    ?res owl:sameAs* ?bdrcres .
    ?resAdm adm:adminAbout ?bdrcres .
    ?resAdm adm:metadataLegal  bda:LD_BDRC_CC0 ;
            adm:status    bda:StatusReleased .
    FILTER(exists{?bdrcres tmp:hasRole ?r})
    ?bdrcres bdo:personEvent ?evt .
    ?evt a ?evtType .
    FILTER (?evtType IN(bdo:PersonBirth , bdo:PersonDeath , bdo:PersonFlourished))
    ?evt :eventWhen ?evtw .
  }
}
