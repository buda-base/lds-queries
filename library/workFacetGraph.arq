#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All works whose various literals contain the given L_NAME parameter value, along with their LICENSE + ACCESS + LANGSCRIPT + STATUS facets.
#QueryParams=L_NAME,LG_NAME
#QueryUrl=/lib/workFacetGraph?L_NAME="'od zer"&LG_NAME=bo-x-ewts

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="ye shes"

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT
{
    ?res tmp:status ?st .
    ?res tmp:isMain true .
    ?res tmp:matchScore ?sc .
    ?res tmp:labelMatch ?labelMatch .
    ?res tmp:noteMatch ?noteMatch .
    ?res ?extMatchP ?extMatch .

    ?res tmp:nbInstance ?nbinstances .
    ?res tmp:provider ?provider .
    ?res tmp:originalRecord ?originalRecord .
    ?res tmp:hasOpen ?hasopen .
    ?res tmp:hasImage ?hasimage .
    ?res tmp:hasEtext ?hasetext .
  
    ?res ?resp ?reso .
    ?res ?respp ?resoo .
 
    ?res tmp:author ?author .
    ?agent skos:prefLabel ?agentL .
    ?res tmp:associatedCentury ?authorC .
    ?res bdo:associatedTradition ?authorT .
  
    ?resoo skos:prefLabel ?ol .

    ?res adm:canonicalHtml ?resCanoHtml

}
WHERE 
{
  {
    {
        (?res ?sc ?labelMatch) text:query ( bdo:skosLabels ?L_NAME "highlight:" ) .
        ?res a/rdfs:subClassOf* bdo:Work .
    } union {
        (?res ?sc ?extMatch ?graph ?extMatchP) text:query ( bdo:extendedStmts ?L_NAME "highlight:" ) .
        ?res a bdo:Work .
    } union {
        (?note ?sc ?noteMatch) text:query ( bdo:noteText ?L_NAME "highlight:" ) .
        ?res bdo:note ?note .
        ?res a/rdfs:subClassOf* bdo:Work .
    }
    #VALUES ?resp {bdo:language skos:altLabel skos:prefLabel rdf:type owl:sameAs tmp:entityScore}
    ?res ?resp ?reso .
    FILTER (?resp IN(bdo:language , skos:altLabel , skos:prefLabel , rdf:type , owl:sameAs , tmp:entityScore , rdfs:seeAlso ))
    ?resAdm adm:adminAbout ?res .
    ?resAdm adm:status ?st .
    ?resAdm adm:metadataLegal/adm:provider ?provider .
    
  } union {

    {
        (?res) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a/rdfs:subClassOf* bdo:Work .
    } union {
        (?res) text:query ( bdo:extendedStmts ?L_NAME ) .
        ?res a bdo:Work .
    } union {
        (?note) text:query ( bdo:noteText ?L_NAME ) .
        ?res bdo:note ?note .
        ?res a/rdfs:subClassOf* bdo:Work .
    }
    ?res owl:sameAs ?reSame .
    ?reSame adm:canonicalHtml ?resCanoHtml .    

  } union {
    
    {
        (?res) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a/rdfs:subClassOf* bdo:Work .
    } union {
        (?note) text:query ( bdo:noteText ?L_NAME ) .
        ?res bdo:note ?note .
        ?res a/rdfs:subClassOf* bdo:Work .
    }
    
    ?res bdo:creator ?creator .
    ?creator bdo:role ?role .
    ?creator bdo:agent ?agent .
    VALUES ?agentp { skos:prefLabel tmp:associatedCentury bdo:associatedTradition }
    ?agent ?agentp ?agento .
    
    bind( if(?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agent, 1/0) as ?author)
    bind( if(?agentp = skos:prefLabel, ?agento, 1/0) as ?agentL)
    bind( if(?agentp = bdo:associatedTradition, ?agento, 1/0) as ?authorT)
    bind( if(?agentp = tmp:associatedCentury && ?role IN(bdr:R0ER0014 , bdr:R0ER0016 , bdr:R0ER0019 , bdr:R0ER0025), ?agento, 1/0) as ?authorC)

  } union {
    
    {
        (?res) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a/rdfs:subClassOf* bdo:Work .
    } union {
        (?note) text:query ( bdo:noteText ?L_NAME ) .
        ?res bdo:note ?note .
        ?res a/rdfs:subClassOf* bdo:Work .
    }
    
    ?res ?respp ?resoo .
    FILTER(?respp IN(bdo:workTranslationOf , bdo:serialMemberOf , bdo:workIsAbout , bdo:workGenre))
    ?resoo skos:prefLabel ?ol .

  } union {
    
    select ?res 
           (count (distinct ?instance) as ?nbinstances)
           (max(?instanceAccessPossible) as ?haspossible)
           (max(?instanceAccessOpen) as ?hasopen) 
           (max(?instanceImage) as ?hasimage) 
           (max(?instanceEtext) as ?hasetext) 
    where {
      
      {
        (?res) text:query ( bdo:skosLabels ?L_NAME ) .
        ?res a/rdfs:subClassOf* bdo:Work .
      } union {
          (?note) text:query ( bdo:noteText ?L_NAME ) .
          ?res bdo:note ?note .
          ?res a/rdfs:subClassOf* bdo:Work .
      }

      ?res bdo:workHasInstance ?instance .
      ?instance bdo:inRootInstance? ?rootInstance .
      FILTER ( NOT EXISTS {?rootInstance :instanceReproductionOf ?reprof })
      ?rootInstance bdo:instanceHasReproduction? ?instanceRep .
      ?instanceAdm adm:adminAbout ?instanceRep .
      ?instanceAdm adm:status bda:StatusReleased .
      bind( (exists {?instanceAdm adm:access bda:AccessOpen}) && not exists {?instanceAdm adm:syncAgent  bdr:SAOPT} && (?instanceEtext || ?instanceImage) as ?instanceAccessOpen )
      bind( exists {?instanceRep a bdo:ImageInstance . values ?thp { tmp:thumbnailIIIFService tmp:thumbnailIIIFSelected } ?instanceRep ?thp  ?th } as ?instanceImage)
      bind( exists {?instanceRep a bdo:EtextInstance} as ?instanceEtext)
      bind( (exists {?instanceAdm adm:access ?acc . FILTER(?acc IN(bda:AccessOpen , bda:AccessFairUse , bda:AccessRestrictedSealed))}) && (?instanceEtext || ?instanceImage) as ?instanceAccessPossible )

    } group by ?res 
  }
}
