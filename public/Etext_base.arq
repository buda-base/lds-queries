#QueryScope=Etexts
#QueryReturnType=Graph
#QueryResults=Basic Info about an etext
#QueryParams=R_RES
#QueryUrl=/Etext_base?R_RES=bdr:UT4CZ5369_I1KG9127_0000

#param.R_RES.type=URI
#param.R_RES.subtype=bdo:Etext
#param.R_RES.desc=the etext on which info is needed

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

construct { 
   ?s ?p ?o .
   ?R_RES tmp:imageVolumeId ?imagevol .
   ?R_RES tmp:hasEtextRes ?etextRes .
   # greatest bdo:sliceStartChar 
   ?R_RES tmp:lastChunk ?lastchunk .
  }
where {
  { 
    ?R_RES ?p ?o .
    BIND (?R_RES as ?s)
  } union {
    ?R_RES bdo:eTextInInstance  ?s .
    ?s ?p ?o .
  } union {
    ?R_RES bdo:eTextInInstance/bdo:instanceOf  ?s .
    ?s skos:prefLabel ?o .
    BIND (skos:prefLabel as ?p)
  } union {
    # get image volume ID (for iiif)
    ?R_RES :eTextIsVolume ?volNum .
    ?R_RES :eTextInInstance ?inInst .
    ?inInst :instanceReproductionOf ?isRepro .
    ?isRepro :instanceHasVolume ?imagevol .
    ?imagevol a :ImageGroup .
    ?imagevol :volumeNumber ?volNum .
  } union {
    # useful info to display etext in mirador
    ?R_RES :volumeOf/:instanceHasReproduction ?hasRepro .
    ?R_RES :volumeNumber ?volNB .
    ?hasRepro a bdo:EtextInstance .
    ?hasRepro :instanceHasVolume ?etextVol .
    ?etextVol :volumeNumber ?volNB ; :volumeHasEtext/:eTextResource ?etextRes .
    filter exists { 
      # in mirador we can only use etexts with page numbers
      ?etextRes :eTextHasPage/:seqNum ?num 
      # etext must not be unpaginated (see bdr:MW1KG14_BED8FE)
      filter not exists { 
        ?etextRes rdf:type bdo:EtextNonPaginated .       
      } 
    } . 
  } union {
    # get greatest bdo:sliceStartChar 
    select (max(?start) as ?lastchunk)
    where {
      ?R_RES bdo:eTextHasChunk ?chunk .
      ?chunk bdo:sliceStartChar ?start .
    }
  }
} 