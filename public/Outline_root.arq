#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All subnodes of this outline node
#QueryParams=R_RES
#QueryUrl=/Outline_root?R_RES=bdr:MW12827

#param.R_RES.type=resource
#param.R_RES.subtype=Instance Resource ID
#param.R_RES.desc=Instance resource ID (can be a part of an instance)
#param.R_RES.example=bdr:MW12827

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>



CONSTRUCT
{
  ?repr :instanceHasVolume ?vol .
  ?vol ?volp ?volo .
  ?part ?partp ?parto .
  ?part   :hasTitle ?partT ;
          :instanceOf ?partW ;
          :contentLocation ?cl ;
          :note ?n ;
          :contentLocationStatement ?cls ;
          bf:identifiedBy ?id ;
          tmp:hasNonVolumeParts ?hasNonVolumeParts ;
          :instanceHasReproduction ?repr .
  ?partT ?partTp ?partTo .
  ?cl ?clp ?clo .
  ?root :hasOutline ?o .
  ?o ?op ?oo .
  ?n ?np ?no .
  ?id ?idp ?ido .
  ?part tmp:author ?partWc .
  ?partW ?partWp ?partWo .
  ?partWc skos:prefLabel ?partWcL .
  ?ancestor ?ancestorp ?ancestoro ;
            tmp:hasNonVolumeParts ?ancestorHasNonVolumeParts .
}
WHERE 
{
  {
    # get ancestors label, test with bdr:MW12827_891768 to see some results
    ?R_RES :inRootInstance? ?root .
    ?o :outlineOf ?root .
    ?o ?op ?oo .
    ?oadm adm:adminAbout ?o ;
          adm:status bda:StatusReleased .
  } union {
    # get ancestors label, test with bdr:MW12827_891768 to see some results
    ?R_RES :partOf+ ?ancestor .
    BIND(EXISTS{?ancestor bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?ancestorHasNonVolumeParts)
    ?ancestor ?ancestorp ?ancestoro .
    FILTER (?ancestorp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart))
  } union {
  	# get parts: essential triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
    ?part ?partp ?parto .
    FILTER (?partp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart, rdfs:seeAlso, :colophon, :incipit, :explicit,:authorshipStatement ) )
     BIND(EXISTS{?part bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?hasNonVolumeParts)
  } union {
    # get parts: essential triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
    ?part :instanceHasReproduction ?repr .
    ?repr a :ImageInstance .
  } union {
  	# get parts: title
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
  	?part  :hasTitle ?partT .
  	?partT ?partTp ?partTo .
  } union {
    # get parts: identifiers
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
    ?part  bf:identifiedBy ?id .
    ?id ?idp ?ido .
  } union {
  	# get parts: work triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
  	?part  :instanceOf ?partW .
  	?partW ?partWp ?partWo .
    FILTER(?partWp = skos:prefLabel || ?partWp = bdo:catalogInfo)
  } union {
  	# get parts: work creator triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
  	?part :instanceOf ?partW .
  	?partW :creator/:agent ?partWc .
  	?partWc skos:prefLabel ?partWcL .
  } union {
  	# get parts: location triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
  	?part :contentLocation ?cl .
  	?cl ?clp ?clo .
  } union {
    # get parts: location triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
    ?part :note ?n .
    ?n ?np ?no .
  } union {
  	# get parts: locationstatement triples
    {
      graph ?og {
         ?R_RES :hasPart ?part .
      }
      FILTER(NOT EXISTS {
        ?outlineadm adm:graphId ?og ;
                    adm:status ?status .
        FILTER(?status != bda:StatusReleased)
      })
    } union {
      BIND(?R_RES as ?part)
    }
  	?part :contentLocationStatement ?cls .
  }
}
