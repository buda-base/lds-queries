#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All subnodes of this outline node
#QueryParams=R_RES
#QueryUrl=/Outline_root?R_RES=bdr:MW12827

#param.R_RES.type=resource
#param.R_RES.subtype=Instance Resource ID
#param.R_RES.desc=Instance resource ID (can be a part of an instance)
#param.R_RES.example=bdr:MW12827

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>



CONSTRUCT
{
  ?repr :instanceHasVolume ?vol .
  ?vol ?volp ?volo .
  ?part ?partp ?parto .
  ?part   :hasTitle ?partT ;
          :instanceOf ?partW ;
          :contentLocation ?cl ;
          :contentLocationStatement ?cls ;
          bf:identifiedBy ?id ;
          tmp:hasVolumeParts ?hasVolumeParts ;
          :instanceHasReproduction ?repr .
  ?partT ?partTp ?partTo .
  ?cl ?clp ?clo .
  ?id ?idp ?ido .
  ?part tmp:author ?partWc .
  ?partW skos:prefLabel ?partWL .
  ?partWc skos:prefLabel ?partWcL .
  ?ancestor ?ancestorp ?ancestoro .
}
WHERE 
{
  {
    # get ancestors label, test with bdr:MW12827_891768 to see some results
    ?R_RES :partOf+ ?ancestor .
    ?ancestor ?ancestorp ?ancestoro .
    FILTER (?ancestorp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart))
  #} union {
  	# get volumes
  #	?R_RES :instanceHasReproduction ?repr .
  #	?repr :instanceHasVolume ?vol .
  # ?vol ?volp ?volo .
  # FILTER (?volp IN(bdo:volumeNumber , skos:prefLabel ))
  } union {
  	# get parts: essential triples
  	?R_RES :hasPart? ?part .
    ?part ?partp ?parto .
    FILTER (?partp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart, rdfs:seeAlso, :colophon, :incipit, :explicit,:authorshipStatement ) )
    BIND(EXISTS{?part bdo:hasPart/bdo:partType bdr:PartTypeVolume} as ?hasVolumeParts)
  } union {
    # get parts: essential triples
    ?R_RES :hasPart? ?part .
    ?part :instanceHasReproduction ?repr .
    ?repr a :ImageInstance .
  } union {
  	# get parts: title
  	?R_RES :hasPart? ?part .
  	?part  :hasTitle ?partT .
  	?partT ?partTp ?partTo .
  } union {
    # get parts: identifiers
    ?R_RES :hasPart? ?part .
    ?part  bf:identifiedBy ?id .
    ?id ?idp ?ido .
  } union {
  	# get parts: work triples
  	?R_RES :hasPart? ?part .
  	?part  :instanceOf ?partW .
  	?partW skos:prefLabel ?partWL .
  } union {
  	# get parts: work creator triples
  	?R_RES :hasPart? ?part .
  	?part :instanceOf ?partW .
  	?partW :creator/:agent ?partWc .
  	?partWc skos:prefLabel ?partWcL .
  } union {
  	# get parts: location triples
  	?R_RES :hasPart? ?part .
  	?part :contentLocation ?cl .
  	?cl ?clp ?clo .
  } union {
  	# get parts: locationstatement triples
  	?R_RES :hasPart? ?part .
  	?part :contentLocationStatement ?cls .
  }
}
