#QueryScope=General
#QueryReturnType=Graph
#QueryResults=All works whose various literals contain the given L_NAME parameter value, along with their LICENSE + ACCESS + LANGSCRIPT + STATUS facets.
#QueryParams=L_NAME,LG_NAME,R_RES
#QueryUrl=/Outline_search?L_NAME="'od zer"&LG_NAME=bo-x-ewts&R_RES=bdr:MW12827

#param.L_NAME.type=string
#param.L_NAME.langTag=LG_NAME
#param.L_NAME.isLucene=true
#param.L_NAME.example="spyod 'jug"

#param.R_RES.type=resource
#param.R_RES.subtype=Instance Resource ID
#param.R_RES.desc=Instance resource ID (can be a part of an instance)
#param.R_RES.example=bdr:MW23703

PREFIX tmp: <http://purl.bdrc.io/ontology/tmp/>

CONSTRUCT
{

    ?inst ?instp ?insto .

    ?t ?tp ?to .
    ?id ?idp ?ido .
    ?inst tmp:matchScore ?titleSc .
    ?inst tmp:titleMatch ?titleMatch.
    ?inst tmp:colophonMatch ?colophonMatch.
    ?inst tmp:hasNonVolumeParts ?hasNonVolumeParts .
    ?work ?workp ?worko .
    ?work tmp:matchScore ?workSc .
    ?work tmp:labelMatch ?labelMatch .
    ?workaac ?workaacp ?workaaco .
    ?author ?authorp ?authoro .
    ?ancestor ?ancestorp ?ancestoro .
    ?ancestor tmp:hasNonVolumeParts ?ancestorHasNonVolumeParts .
    ?cl ?clp ?clo .

}
WHERE 
{
  {
    # search in titles in graph
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title ?titleSc ?titleMatch) text:query ( rdfs:label ?L_NAME "highlight:" ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst ?titleSc ?colophonMatch) text:query ( bdo:colophon ?L_NAME "highlight:" ) .
        } union {
          (?inst ?titleSc ?titleMatch) text:query ( bdo:skosLabels ?L_NAME "highlight:" ) .
        }
        # only return results that are sub parts of the requested part
        
        ?inst :partOf+ ?R_RES .
    }
    
    BIND(EXISTS{?inst bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?instHasNonVolumeParts)
    ?inst :hasTitle ?t .
    ?t ?tp ?to .
    ?inst ?instp ?insto .
    
  } union {
    # search in titles in graph
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst) text:query ( bdo:colophon ?L_NAME ) .
        } union {
          (?inst) text:query ( bdo:skosLabels ?L_NAME ) .
        }
        # only return results that are sub parts of the requested part
        ?inst :partOf+ ?R_RES .
    }

    ?inst :partOf+ ?ancestor .
    BIND(EXISTS{?ancestor bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?ancestorHasNonVolumeParts)
    ?ancestor ?ancestorp ?ancestoro .
    FILTER (?ancestorp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart))
    
  } union {
    
    # same with content location
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst) text:query ( bdo:colophon ?L_NAME ) .
        } union {
          (?inst) text:query ( bdo:skosLabels ?L_NAME ) .
        }
        ?inst :partOf+ ?R_RES .
    }
    
    ?inst :contentLocation ?cl .
    ?cl ?clp ?clo .

  } union {
    
    # same with work info
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst) text:query ( bdo:colophon ?L_NAME ) .
        } union {
          (?inst) text:query ( bdo:skosLabels ?L_NAME ) .
        }
        ?inst :partOf+ ?R_RES .
    }
    
    ?inst :instanceOf ?work .
    ?work ?workp ?worko .

  } union {
    
    # same with creator info
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst) text:query ( bdo:colophon ?L_NAME ) .
        } union {
          (?inst) text:query ( bdo:skosLabels ?L_NAME ) .
        }
        ?inst :partOf+ ?R_RES .
    }
    
    ?inst :instanceOf ?work .
    ?work :creator ?workaac .
    ?workaac ?workaacp ?workaaco .
    ?workaac :agent ?author .
    ?author ?authorp ?authoro .

  } union {
    
    # same with identifiers
    ?o :outlineOf ?R_RES .
    ?rootAdm adm:adminAbout ?o ;
             adm:status bda:StatusReleased ;
             adm:graphId ?rootGraph .
    # I checked on http://sparql.org and there is no join when using the quad optimizations
    # so theoretically no performance problem
    graph ?rootGraph {
        {
          (?title) text:query ( rdfs:label ?L_NAME ) .
          ?inst :hasTitle ?title .
        } union {
          (?inst) text:query ( bdo:colophon ?L_NAME ) .
        } union {
          (?inst) text:query ( bdo:skosLabels ?L_NAME ) .
        }
        ?inst :partOf+ ?R_RES .
    }
    
    ?inst bf:identifiedBy ?id .
    ?id ?idp ?ido .

  } union {

    # more general search in works with instance in parts

    ?R_RES :inRootInstance? ?root .
    (?work ?workSc ?labelMatch) text:query ( bdo:skosLabels 200 ?L_NAME "highlight:" ) .
    ?work :workHasInstance ?inst .
    ?inst :inRootInstance ?root .
    # here again we could check
    # ?inst :partOf+ ?R_RES .

    BIND(EXISTS{?inst bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?instHasNonVolumeParts)

    ?inst ?instp ?insto .
    ?inst :hasTitle ?t .
    ?t ?tp ?to .

    ?work ?workp ?worko .

  } union {

    # more general search in works with instance in parts

    ?R_RES :inRootInstance? ?root .
    (?work ?workSc ?labelMatch) text:query ( bdo:skosLabels 200 ?L_NAME ) .
    ?work :workHasInstance ?inst .
    ?inst :inRootInstance ?root .
    # here again we could check
    # ?inst :partOf+ ?R_RES .

    ?inst :partOf+ ?ancestor .
    BIND(EXISTS{?ancestor bdo:hasPart ?p . ?p bdo:partType ?pt FILTER(?pt != bdr:PartTypeVolume && ?pt != bdr:PartTypeSection)} as ?ancestorHasNonVolumeParts)
    ?ancestor ?ancestorp ?ancestoro .
    FILTER (?ancestorp IN (skos:prefLabel , :partTreeIndex , :partType , :partIndex , :hasPart))

  } union {

    # same with identifiers

    ?R_RES :inRootInstance? ?root .
    (?work) text:query ( bdo:skosLabels ?L_NAME 200 "highlight:" ) .
    ?work :workHasInstance ?inst .
    ?inst :inRootInstance ?root .
    # here again we could check
    # ?inst :partOf+ ?R_RES .

    ?inst bf:identifiedBy ?id .
    ?id ?idp ?ido .

  } union {

    # same with content location

    ?R_RES :inRootInstance? ?root .
    (?work) text:query ( bdo:skosLabels ?L_NAME 200 "highlight:" ) .
    ?work :workHasInstance ?inst .
    ?inst :inRootInstance ?root .
    # here again we could check
    # ?inst :partOf+ ?R_RES .

    ?inst :contentLocation ?cl .
    ?cl ?clp ?clo .

  } union {

    # same with authors
    
    ?R_RES :inRootInstance? ?root .
    (?work) text:query ( bdo:skosLabels ?L_NAME 200 "highlight:" ) .
    ?work :workHasInstance ?inst .
    ?inst :inRootInstance ?root .
    # here again we could check
    # ?inst :partOf+ ?R_RES .

    ?work :creator ?workaac .
    ?workaac ?workaacp ?workaaco .
    ?workaac :agent ?author .
    ?author ?authorp ?authoro .

  }
}
