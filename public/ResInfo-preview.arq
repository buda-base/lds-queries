#QueryScope=General
#QueryReturnType=Graph
#QueryResults=A graph for the given resource.
#QueryParams=R_RES
#QueryUrl=/ResInfo-preview?R_RES=bdr:P360

#param.R_RES.type=resource
#param.R_RES.subtype=a Resource ID
#param.R_RES.desc=the unique resource ID of the chosen resource

construct {
 ?R_RES ?rpkeep ?rokeep .
 ?ro2 ?ro2p ?ro2o .
 ?ro3 ?ro3p ?ro3o .

 ?q ?qp ?qo .
 ?R_RES tmp:hasAdminData ?q .

 ?rokeep tmp:withSameAs ?roSame .
 
 # misc props needed to fix display:

 ?ro skos:prefLabel ?roLabel .

 ?roTCL ?roTCLp ?roTCLo .
 ?roTCLo skos:prefLabel ?roTCLoLabel .

 ?roEv skos:prefLabel ?roEvLab .

 ?id ?idp ?ido .
 ?title ?titlep ?titleo .

# repro+thumbnail for versions
# + provider
?version  :instanceHasReproduction ?repro ;
          tmp:thumbnailIIIFService ?vThumb ;
          tmp:provider ?qvop .

?R_RES bdo:personEvent ?foundationEvt .
?foundationEvt ?foundationEvtp ?foundationEvto ;
               :eventWhere ?foundationPlace .
?foundationPlace skos:prefLabel ?foundationPlaceL .

} where {
  {
    ?R_RES ?rpkeep ?rokeep .
    FILTER(?rpkeep != bdo:collectionMember && ?rpkeep != bdo:serialHasInstance && ?rpkeep != bdo:hasPart)
  } union  {
    # monastery foundation events, see https://github.com/buda-base/public-digital-library/issues/556
    ?foundationEvt :eventWho ?R_RES .
    ?foundationPlace :placeEvent ?foundationEvt .
    ?foundationEvt ?foundationEvtp ?foundationEvto .
    FILTER (?foundationEvtp != bdo:eventWho)
    ?foundationPlace skos:prefLabel ?foundationPlaceL .
  } union {
    # add prefLabel for any related resource
    ?R_RES ?rp ?ro .
    FILTER(?rp != bdo:collectionMember && ?rp != bdo:serialHasInstance && ?rp != bdo:hasPart)
    ?ro skos:prefLabel ?roLabel .
  } union {
    # add prefLabel for Event subclasses objects
    ?R_RES ?rp ?ro .
    FILTER(?rp != bdo:collectionMember && ?rp != bdo:serialHasInstance && ?rp != bdo:hasPart)
    ?ro rdf:type/rdfs:subClassOf+ :Event .
    ?ro ?rpEv ?roEv .
    ?roEv skos:prefLabel ?roEvLab .
  } union {
    ?R_RES ?rp2 ?ro2 .
    FILTER(?rp2 != bdo:collectionMember && ?rp2 != bdo:serialHasInstance && ?rp2 != bdo:hasPart)
    ?ro2 rdf:type/rdfs:subClassOf+ :Facet .
    ?ro2 ?ro2p ?ro2o .
  } union {
    ?R_RES ?rp3 ?ro3 .
    FILTER(?rp3 != bdo:collectionMember && ?rp3 != bdo:serialHasInstance && ?rp3 != bdo:hasPart)
    ?ro3 rdf:type/rdfs:subClassOf+ :Event .
    ?ro3 ?ro3p ?ro3o .
  } union {
    ?q adm:adminAbout ?R_RES .
    ?q ?qp ?qo .
    # we don't return all the adminAbout, they can be in large quantities
    FILTER(?qp != adm:adminAbout)
  } union {
    # add ContentLocation nodes that were missing
    # + display prefLabel for AgentAsCreator 
    # + add Note subnodes
    VALUES ?rpTCL { :contentLocation :creator :note }
    ?R_RES ?rpTCL ?roTCL .
    ?roTCL ?roTCLp ?roTCLo .
  } union {
    # label for previous:
    VALUES ?rpTCL { :contentLocation :creator :note }
    ?R_RES ?rpTCL ?roTCL .
    ?roTCL ?roTCLp ?roTCLo .
    ?roTCLo skos:prefLabel ?roTCLoLabel .
  } union {
    # add repro+thumbnail for versions
    ?R_RES :workHasInstance ?version .
    ?version :instanceHasReproduction ?repro .
    ?repro a bdo:ImageInstance .
  } union {
    # add repro for versions with inRootInstance
    ?R_RES :workHasInstance ?version .
    ?version :inRootInstance ?rootV .
    ?rootV :instanceHasReproduction ?repro .
    ?repro a bdo:ImageInstance .
  } union {
    # add thumbnail for work instances
    ?R_RES :workHasInstance ?version .
    ?version :inRootInstance? ?rootV .
    ?rootV tmp:thumbnailIIIFService ?vThumb .
  } union {
    # add thumbnail for instance reproductions
    ?R_RES :instanceHasReproduction ?version .
    ?version :inRootInstance? ?rootV .
    ?rootV tmp:thumbnailIIIFService ?vThumb .
  } union {
    ?R_RES bf:identifiedBy ?id .
    ?id ?idp ?ido .
  } union {
    ?R_RES bdo:hasTitle ?title .
    ?title ?titlep ?titleo .
  }
}
