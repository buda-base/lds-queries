#QueryScope=Etexts
#QueryReturnType=Graph
#QueryResults=etext chunks containing the given expression
#QueryUrl=/chunkContext?R_UT=bdr:UT4CZ5369_I1KG9127_0000&I_START=1000&I_END=1300
#QueryParams=R_UT,I_START,I_END

#param.R_UT.type=resource
#param.R_UT.example=bdr:UT4CZ5369_I1KG9127_0000
#param.R_UT.desc=the etext in which we operate

#param.I_START.type=int
#param.I_START.example=1000

#param.I_END.type=int
#param.I_END.example=1300

## tests: R_UT=bdr:UTIE0OPP008105_v026&I_START=455688&I_END=460617
##        R_UT=bdr:UT4CZ5369_I1KG9128_0000&I_START=1000&I_END=2000
construct {
    ?R_UT :eTextHasChunk ?c .
    ?c :chunkContents ?chunkcontent ;
       :sliceStartChar ?chunkstart ;
       :sliceEndChar ?chunkend .
    ?R_UT :eTextHasPage ?p .
    ?p :sliceStartChar  ?pstart ;
       :sliceEndChar    ?pend ;
       :seqNum ?pagenum ;
       a bdo:EtextPage ;
       tmp:inInstancePart ?instpart .
    ?instpart skos:prefLabel ?instpartL .
    ?inst skos:prefLabel ?instL .
    ?R_UT :eTextIsVolume ?vnum ;
          skos:prefLabel ?etextL ;
          tmp:inImageGroup ?imgv ;
          tmp:inInstance ?inst .

} where {
   ?R_UT :eTextInInstance/^adm:adminAbout/adm:access bda:AccessOpen .
   {
     ?R_UT :eTextHasChunk ?c .
     ?c :sliceStartChar ?chunkstart ;
        :sliceEndChar ?chunkend .
     FILTER (?chunkstart <= ?I_END && ?chunkend >= ?I_START )
     ?c :chunkContents ?chunkcontent .
   } union {
     ?R_UT skos:prefLabel ?etextL .
   } union {
     # for passages with a page number
     ?R_UT :eTextHasPage ?p .
     # TODO: is it more efficient to get ?pstart, filter on it and then take ?pend ?
     ?p :sliceStartChar  ?pstart ;
          :sliceEndChar    ?pend .
     FILTER (?pstart <= ?I_END && ?pend >= ?I_START)
     ?p :seqNum ?pagenum .
   } union {
     # add image group if available
     ?R_UT :eTextIsVolume ?vnum .
     ?R_UT :eTextInInstance ?ie_inst .
     ?ie_inst :instanceReproductionOf ?w_inst .
     ?w_inst a :ImageInstance .
     ?w_inst :instanceHasVolume ?imgv .
     ?imgv :volumeNumber ?vnum .
   } union {
     # add instance
     ?R_UT :eTextInInstance ?ie_inst .
     ?ie_inst :instanceReproductionOf+ ?inst .
     ?inst a ?instType .
     FILTER(?instType != :ImageInstance)
     ?inst skos:prefLabel ?instL .
   } union {
     # for passages with a corresponding location
     ?R_UT :eTextIsVolume ?vnum .
     ?R_UT :eTextHasPage ?p .
     ?p :sliceStartChar  ?pstart ;
          :sliceEndChar    ?pend .
     # taking only one page for this exercise:
     FILTER (?pstart <= ?I_START && ?pend >= ?I_START)
     ?p :seqNum ?pagenum .
     ?R_UT :eTextInInstance ?ie_inst .
     ?ie_inst :instanceReproductionOf+ ?inst .
       ?inst a ?instType .
       FILTER(?instType != :ImageInstance)
     ?inst :instanceHasReproduction ?iinst .
     ?iinst a :ImageInstance .
     ?loc :contentLocationInstance ?iinst ;
            :contentLocationVolume ?bvol .
     FILTER ((?bvol = ?vnum && NOT EXISTS {?loc :contentLocationEndVolume ?evol}) || (?bvol <= ?vnum  && EXISTS {?loc :contentLocationEndVolume ?evol FILTER (?evol >= ?vnum)}))
     # TODO: is it more efficient to get ?bpage, filter on it and then take ?epage ?
     ?loc :contentLocationPage ?bpage ;
          :contentLocationEndPage ?epage .
     BIND(EXISTS {?loc :contentLocationEndVolume ?evol FILTER (?evol > ?vnum)} as ?nonlast)
     FILTER ((?bvol < ?vnum || ?bpage <= ?pagenum) && (?nonlast || ?epage >= ?pagenum))
     ?instpart :contentLocation ?loc .
     ?instpart skos:prefLabel ?instpartL .
   }
}
